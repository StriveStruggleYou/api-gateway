server {
  listen 8100 default_server;
  server_name "" [::]:8100;
  resolver 127.0.0.1:8600;
  header_filter_by_lua_file "$api_gateway_root/src/nginx/scripts/add_cors_headers.lua";

  access_log /var/log/nginx/api-gateway.access.log log_format_with_perf;
  error_log /var/log/nginx/api-gateway.error.log;

  set_by_lua_file $stripped_uri "$api_gateway_root/src/nginx/scripts/strip_service_name_from_uri.lua";

  location /healthcheck {
    content_by_lua 'ngx.say("OK")';
  }

  location /helios {
    deny all;
  }

  location /auth {
    limit_req zone=registration burst=2 nodelay;
    proxy_pass_request_headers off;

    # FIXME: This is not intended to be a long term solution. Remove once
    # authentication is separated from helios and is internal only.
    location ~ ^/auth/users/(\w+)/tokens {
      deny all;
    }

    content_by_lua '
      local router = require("nginx/router")
      return router.route()
      ';
  }

  location / {
    rewrite ^/service/(.*)$ /$1 break;
    proxy_pass_request_headers off;
    content_by_lua '
      local router = require("nginx/router")
      return router.route()
      ';
  }

  location /token {
    content_by_lua '
      local http = require "resty.http"
      local config = require "config"

      local request_headers = ngx.req.get_headers(100)

      -- creating the http object in a module appears to be problematic
      -- (see http://wiki.nginx.org/HttpLuaModule#Data_Sharing_within_an_Nginx_Worker)
      local httpc = http.new()
      httpc:set_timeout(5000)
      local url = string.format("%s/info?code=%s", config.HELIOS_URL, ngx.var.arg_code)
      local res, err = httpc:request_uri(url, {
             method = "GET",
             headers = request_headers,
      })

      if err then
        ngx.log(ngx.ERR, "request error: " .. err)
      end

      if res then
        ngx.say(res.body)
      else
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      end';
  }

  location @service {
    set_by_lua $upstream '
      local upstream = require("upstream")
      return upstream.find(ngx.var.request_uri);
    ';

    access_by_lua '
      if ngx.var.upstream == "__not_found" then
        ngx.status = ngx.HTTP_NOT_FOUND
        ngx.say("Invalid service resource")
      else
        return
      end';

    proxy_pass http://$upstream/$stripped_uri;
  }
}
